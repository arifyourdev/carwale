import axios from "axios"
import connect from "../db/connect.js";

async function generateAccessToken() {
    const response = await axios({
        url: process.env.PAYPAL_BASE_URL + '/v1/oauth2/token',
        method: 'post',
        data: 'grant_type=client_credentials',
        auth: {
            username: process.env.PAYPAL_CLIENT_ID,
            password: process.env.PAYPAL_SECRET
        }
    })

    return response.data.access_token
}

async function generateCustomOrderId() {
    try {
        const [result] = await connect.execute('SELECT MAX(order_id) AS lastOrderId FROM orders');
        const lastOrderId = result[0].lastOrderId;

        if (!lastOrderId) {
            return 'CU__00001'; // Start with the first order ID if no previous orders exist
        }

        const numericPart = parseInt(lastOrderId.split('__')[1], 10);
        const newNumericPart = (numericPart + 1).toString().padStart(5, '0'); // Ensure 5 digits with leading zeros
        return `CU__${newNumericPart}`;
    } catch (error) {
        console.error('Error generating custom order ID:', error);
        throw new Error('Unable to generate order ID');
    }
}


export const createOrder = async (req, res) => {
    try {
        const orderId = await generateCustomOrderId();
        const cartData = JSON.parse(req.body.cartData);
        const addressId = req.body.selected_address_id; // Dynamically sent address ID
        const userId = req.session.user.id;

        if (!cartData || cartData.length === 0) {
            return res.status(400).json({ error: 'Cart data is required' });
        }

        if (!addressId) {
            return res.status(400).json({ error: 'Address is required' });
        }

        let totalAmount = 0;
        const items = cartData.map(item => {
            totalAmount += item.product_price * item.quantity;
            return {
                name: item.product_name,
                description: item.description,
                quantity: item.quantity,
                unit_amount: {
                    currency_code: 'GBP',
                    value: item.product_price,
                },
            };
        });

        // Insert into `orders`
        const orderQuery = `
            INSERT INTO orders (order_id, user_id, address_id, total_price, order_status, payment_status, payment_type, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, NOW());
        `;
        await connect.execute(orderQuery, [
            orderId,
            userId,
            addressId,
            totalAmount.toFixed(2),
            'PENDING',
            'PENDING',
            req.body.payment_method || 'PAYPAL',
        ]);

        // Insert into `order_items`
        const orderItemsQuery = `
            INSERT INTO order_details (order_id, user_id, product_id, product_size, price, quantity, created_at)
            VALUES (?, ?, ?, ?, ?, ?, NOW());
        `;
        for (const item of cartData) {
            await connect.execute(orderItemsQuery, [
                orderId,
                userId,
                item.product_id,
                item.product_size,
                item.product_price,
                item.quantity,
            ]);
        }

        // Clear cart data from database and session
        await connect.execute('DELETE FROM cu_cart WHERE user_id = ?', [userId]);
        req.session.cart = [];

        res.status(200).json({ success: true, message: 'Order created successfully', orderId });
    } catch (error) {
        console.error('Error creating order:', error);
        res.status(500).json({ success: false, message: 'Error creating order' });
    }
};



export const capturePayment = async (orderId) => {
    try {
        const accessToken = await generateAccessToken()

        const response = await axios({
            url: process.env.PAYPAL_BASE_URL + `/v2/checkout/orders/${orderId}/capture`,
            method: 'post',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + accessToken
            }
        })

        return response.data
    } catch (error) {
        console.error(error)
        throw new Error('Error capturing payment: ' + error.message)
    }
}

export const completeOrder = async (req, res) => {
    try {
        await capturePayment(req.query.token)
        res.render('complete-order');
    } catch (error) {
        res.status(500).send('Error: ' + error.message)
    }
}

export const cancelOrder = (req, res) => {
    res.redirect('/')
}